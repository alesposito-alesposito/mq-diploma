// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =============================
// Core models for authentication
// =============================

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?

  // Relations
  accounts        Account[]
  sessions        Session[]
  memberships     TeamMembership[]
  templates       Template[]        @relation("TemplateOwner")

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Account {
  id                    String   @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  oauth_token_secret    String?
  oauth_token           String?

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =============================
// Collaboration & Teams
// =============================

model Team {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String?

  memberships TeamMembership[]
  mailboxes   Mailbox[]
  templates   Template[]       @relation("TeamTemplates")

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

model TeamMembership {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

// =============================
// Mailboxes & Templates
// =============================

enum MailAuthType {
  BASIC
  OAUTH2
}

enum MailboxState {
  ACTIVE
  DISABLED
}

model Mailbox {
  id               String        @id @default(cuid())
  teamId           String
  name             String
  emailAddress     String
  fromName         String?
  state            MailboxState  @default(ACTIVE)

  // IMAP
  imapHost         String
  imapPort         Int
  imapSecure       Boolean       @default(true)

  // SMTP
  smtpHost         String
  smtpPort         Int
  smtpSecure       Boolean       @default(true)

  // Auth
  authType         MailAuthType  @default(BASIC)
  username         String
  encryptedSecret  String        // password or OAuth tokens, encrypted
  encryptionNonce  String

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  team             Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, emailAddress])
}

model Template {
  id        String   @id @default(cuid())
  teamId    String?
  ownerId   String?
  name      String
  subject   String
  html      String
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team      Team?    @relation("TeamTemplates", fields: [teamId], references: [id], onDelete: SetNull)
  owner     User?    @relation("TemplateOwner", fields: [ownerId], references: [id], onDelete: SetNull)

  @@index([teamId])
  @@index([ownerId])
}
